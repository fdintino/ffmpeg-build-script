#!/bin/bash

set -eo pipefail

# HOMEPAGE: https://github.com/markus-perl/ffmpeg-build-script
# LICENSE: https://github.com/markus-perl/ffmpeg-build-script/blob/master/LICENSE

FFMPEG_GIT_DATE=20201202
FFMPEG_GIT_REF=0639f5c
FFMPEG_BUILD_DIR=ffmpeg-git-20201104-a1553b0cfb

PROGNAME=$(basename "$0")
VERSION=1.20
CWD=$(pwd)
PACKAGES="$CWD/packages"
WORKSPACE="$CWD/workspace"
# Add the same hardening flags used by ffmpeg's --toolchain=hardened
CFLAGS="-I$WORKSPACE/include -O3 -fno-strict-overflow -fstack-protector-all -fPIE"
CXXFLAGS="$CFLAGS"
CPPFLAGS="$CFLAGS -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=2"
LDFLAGS="-L$WORKSPACE/lib -Wl,-z,relro -Wl,-z,now"

LDEXEFLAGS=""
EXTRALIBS="-ldl -lpthread -lm -lz -liconv"
EXTRA_CFLAGS="-I$WORKSPACE/include"
EXTRA_LDFLAGS="-L$WORKSPACE/lib"
CONFIGURE_OPTIONS=()

if [[ "$OSTYPE" == "darwin"* ]]; then
	EXTRALIBS="-liconv"
	# Remove LDFLAGS hardening that OS X's gnu ld doesn't understand
	LDFLAGS="-L$WORKSPACE/lib"
else
	CONFIGURE_OPTIONS+=("--toolchain=hardened")
fi

# Speed up the process
# Env Var NUMJOBS overrides automatic detection
if [[ -n "$NUMJOBS" ]]; then
	MJOBS="$NUMJOBS"
elif [[ -f /proc/cpuinfo ]]; then
	MJOBS=$(grep -c processor /proc/cpuinfo)
elif [[ "$OSTYPE" == "darwin"* ]]; then
	MJOBS=$(sysctl -n machdep.cpu.thread_count)
	CONFIGURE_OPTIONS+=("--enable-videotoolbox" "--enable-coreimage" "--enable-audiotoolbox" "--enable-opencl" "--enable-opengl")
	for fmt in mpeg1 mpeg2 hevc h264 h263 mpeg4; do
		CONFIGURE_OPTIONS+=("--enable-hwaccel=${fmt}_videotoolbox")
	done
else
	MJOBS=4
fi

make_dir () {
	remove_dir "$1"
	if ! mkdir "$1"; then
		printf "\n Failed to create dir %s" "$1";
		exit 1
	fi
}

remove_dir () {
	if [ -d "$1" ]; then
		rm -r "$1"
	fi
}

download () {
	# download url [filename[dirname]]

	DOWNLOAD_PATH="$PACKAGES"
	DOWNLOAD_FILE="${2:-"${1##*/}"}"

	if [[ "$DOWNLOAD_FILE" =~ "tar." ]]; then
		TARGETDIR="${DOWNLOAD_FILE%.*}"
		TARGETDIR="${3:-"${TARGETDIR%.*}"}"
	else
		TARGETDIR="${3:-"${DOWNLOAD_FILE%.*}"}"
	fi

	if [ ! -f "$DOWNLOAD_PATH/$DOWNLOAD_FILE" ]; then
		echo "Downloading $1 as $DOWNLOAD_FILE"
		curl -L --silent -o "$DOWNLOAD_PATH/$DOWNLOAD_FILE" "$1"

		EXITCODE=$?
		if [ $EXITCODE -ne 0 ]; then
			echo ""
			echo "Failed to download $1. Exitcode $EXITCODE. Retrying in 10 seconds";
			sleep 10
			curl -L --silent -o "$DOWNLOAD_PATH/$DOWNLOAD_FILE" "$1"
		fi

		EXITCODE=$?
		if [ $EXITCODE -ne 0 ]; then
			echo ""
			echo "Failed to download $1. Exitcode $EXITCODE";
			exit 1
		fi

		echo "... Done"
	else
		echo "$DOWNLOAD_FILE has already downloaded."
	fi

	make_dir "$DOWNLOAD_PATH/$TARGETDIR"

	if [ -n "$3" ]; then
		if ! tar -xvf "$DOWNLOAD_PATH/$DOWNLOAD_FILE" -C "$DOWNLOAD_PATH/$TARGETDIR" 2>/dev/null >/dev/null; then
			echo "Failed to extract $DOWNLOAD_FILE";
			exit 1
		fi
	else
		if ! tar -xvf "$DOWNLOAD_PATH/$DOWNLOAD_FILE" -C "$DOWNLOAD_PATH/$TARGETDIR" --strip-components 1 2>/dev/null >/dev/null; then
			echo "Failed to extract $DOWNLOAD_FILE";
			exit 1
		fi
	fi

	echo "Extracted $DOWNLOAD_FILE";

	cd "$DOWNLOAD_PATH/$TARGETDIR" || (echo "Error has occurred." ; exit 1)
}

execute () {
    set +e

	echo "$ $*"

	OUTPUT=$("$@" 2>&1)

	# shellcheck disable=SC2181
	if [ $? -ne 0 ]; then
		if [ -e $PACKAGES/$FFMPEG_BUILD_DIR/ffbuild/config.log ]; then
			cat $PACKAGES/$FFMPEG_BUILD_DIR/ffbuild/config.log
		fi
		echo "$OUTPUT"
		echo ""
		echo "Failed to Execute $*" >&2
		exit 1
	fi
    set -e
}

build () {
	echo ""
	if [ -n "$IS_GHA" ]; then
		echo "::group::Building $1"
	else
		echo "Building $1"
	fi
	echo "======================="

	if [ -f "$PACKAGES/$1.done" ]; then
		echo "$1 already built. Remove $PACKAGES/$1.done lockfile to rebuild it."
		return 1
	fi

	return 0
}

command_exists () {
	if ! [[ -x $(command -v "$1") ]]; then
		return 1
	fi

	return 0
}

library_exists () {
	local result=0
	local output=$(pkg-config --exists --print-errors "$1" 2>&1 > /dev/null) || result=$?
	if [ ! "$result" = "0" ]; then
		return 1
	fi

	return 0
}

build_done () {
	touch "$PACKAGES/$1.done"
	if [ -n "$IS_GHA" ]; then
		echo "::endgroup::"
	fi
}

cleanup () {
	remove_dir "$PACKAGES"
	remove_dir "$WORKSPACE"
	echo "Cleanup done."
	echo ""
}

usage () {
	echo "Usage: $PROGNAME [OPTIONS]"
	echo "Options:"
	echo "  -h, --help          Display usage information"
	echo "      --version       Display version information"
	echo "  -b, --build         Starts the build process"
	echo "  -c, --cleanup       Remove all working dirs"
	echo "  -f, --full-static   Build a full static FFmpeg binary (eg. glibc, pthreads etc...) **only Linux**"
	echo "                      Note: Because of the NSS (Name Service Switch), glibc does not recommend static links."
	echo ""
}

while (( $# > 0 )); do
	case $1 in
		-h | --help)
			usage
			exit 0
			;;
		--version)
			echo "$VERSION"
			exit 0
			;;
		-*)
			if [[ "$1" == "--build" || "$1" =~ 'b' ]]; then
				bflag='-b'
			fi
			if [[ "$1" == "--cleanup" || "$1" =~ 'c'  && ! "$1" =~ '--' ]]; then
				cflag='-c'
				cleanup
			fi
			if [[ "$1" == "--skip" || "$1" == '-s' ]]; then
				SKIP_PACKAGES+=("$2")
				shift
			fi
			if [[ "$1" == "--full-static" || "$1" =~ 'f' ]]; then
				if [[ "$OSTYPE" == "darwin"* ]]; then
					echo "Error: A full static binary can only be build on Linux."
					exit 1
				fi
				LDEXEFLAGS="-static"
				CFLAGS="$CFLAGS -static-libgcc -static-libstdc++"
				CXXFLAGS="$CXXFLAGS -static-libgcc -static-libstdc++"
				CPPFLAGS="$CPPFLAGS -static-libgcc -static-libstdc++"
				EXTRA_CFLAGS="$EXTRA_CFLAGS -static"
				EXTRA_LDFLAGS="$EXTRA_LDFLAGS -static"
			fi
			shift
			;;
		*)
			usage
			exit 1
			;;
	esac
done

echo "ffmpeg-build-script v$VERSION"
echo "========================="
echo ""

if [ -z "$bflag" ]; then
	if [ -z "$cflag" ]; then
		usage
		exit 1
	fi
	exit 0
fi

echo "Using $MJOBS make jobs simultaneously."

if [ -n "$LDEXEFLAGS" ]; then
	echo "Start the build in full static mode."
fi

mkdir -p "$PACKAGES"
mkdir -p "$WORKSPACE"

export PATH="${WORKSPACE}/bin:$PATH"
PKG_CONFIG_PATH="/usr/local/lib/x86_64-linux-gnu/pkgconfig:/usr/local/lib/pkgconfig"
PKG_CONFIG_PATH+=":/usr/local/share/pkgconfig:/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/lib/pkgconfig:/usr/share/pkgconfig:/usr/lib64/pkgconfig"
export PKG_CONFIG_PATH

export CFLAGS
export CXXFLAGS
export CPPFLAGS
export LDFLAGS

if ! command_exists "make"; then
	echo "make not installed.";
	exit 1
fi

if ! command_exists "g++"; then
	echo "g++ not installed.";
	exit 1
fi

if ! command_exists "curl"; then
	echo "curl not installed.";
	exit 1
fi


##
## build tools
##

if build "yasm"; then
	download "https://github.com/yasm/yasm/releases/download/v1.3.0/yasm-1.3.0.tar.gz"
	execute ./configure --prefix="${WORKSPACE}"
	execute make -j $MJOBS
	execute make install
	build_done "yasm"
fi

if build "nasm"; then
	download "https://www.nasm.us/pub/nasm/releasebuilds/2.15.05/nasm-2.15.05.tar.xz"
	execute ./configure --prefix="${WORKSPACE}" --disable-shared --enable-static
	execute make -j $MJOBS
	execute make install
	build_done "nasm"
fi

if build "pkg-config"; then
	download "https://pkgconfig.freedesktop.org/releases/pkg-config-0.29.2.tar.gz"
	execute ./configure --silent --prefix="${WORKSPACE}" --with-pc-path="${WORKSPACE}"/lib/pkgconfig --with-internal-glib
	execute make -j $MJOBS
	execute make install
	build_done "pkg-config"
fi

if build "zlib"; then
	download "https://www.zlib.net/zlib-1.2.11.tar.gz"
	execute ./configure --static  --prefix="${WORKSPACE}"
	execute make -j $MJOBS
	execute make install
	build_done "zlib"
fi
CONFIGURE_OPTIONS+=("--enable-zlib")

if build "openssl"; then
	download "https://www.openssl.org/source/openssl-1.1.1h.tar.gz"
	execute ./config --prefix="${WORKSPACE}" --openssldir="${WORKSPACE}" --with-zlib-include="${WORKSPACE}"/include/ --with-zlib-lib="${WORKSPACE}"/lib no-shared zlib
	execute make -j $MJOBS
	execute make install

	build_done "openssl"
fi
CONFIGURE_OPTIONS+=("--enable-openssl")

if build "cmake"; then
	download "https://cmake.org/files/v3.18/cmake-3.18.4.tar.gz"
	execute ./configure --prefix="${WORKSPACE}" --system-zlib
	execute make -j $MJOBS
	execute make install
	build_done "cmake"
fi

##
## basic libraries
##

if build "iconv"; then
	download "https://ftp.gnu.org/pub/gnu/libiconv/libiconv-1.16.tar.gz"
	execute ./configure --prefix="${WORKSPACE}" --disable-shared --enable-static --disable-debug --enable-extra-encodings
	execute make -j $MJOBS install-lib
	execute make -j $MJOBS install-lib -C libcharset
	execute make install

	build_done "iconv"
fi
CONFIGURE_OPTIONS+=("--enable-iconv")

if build "xz"; then
	download "https://tukaani.org/xz/xz-5.2.5.tar.gz"
	execute ./configure --prefix="${WORKSPACE}" --disable-shared --enable-static
	execute make -j $MJOBS install

	build_done "xz"
fi
CONFIGURE_OPTIONS+=("--enable-lzma")

if build "bzip2"; then
	download "https://sourceware.org/pub/bzip2/bzip2-1.0.8.tar.gz"
	sed -i.backup '/LDFLAGS=/d' Makefile
	sed -i.backup 's/CFLAGS=/CFLAGS+=/g' Makefile
	
	execute make -j $MJOBS install PREFIX="${WORKSPACE}"

	build_done "bzip2"
fi
CONFIGURE_OPTIONS+=("--enable-bzlib")
	


##
## video library
##

if build "x264"; then
	download "https://code.videolan.org/videolan/x264/-/archive/stable/x264-stable.tar.bz2"

	if [[ "$OSTYPE" == "linux-gnu" ]]; then
		execute ./configure --prefix="${WORKSPACE}" --enable-static --enable-pic CXXFLAGS="$CXXFLAGS -fPIC"
	else
		execute ./configure --prefix="${WORKSPACE}" --enable-static --enable-pic
	fi

	execute make -j $MJOBS
	execute make install
	execute make install-lib-static

	build_done "x264"
fi
CONFIGURE_OPTIONS+=("--enable-libx264")

if build "x265"; then
	download "https://github.com/videolan/x265/archive/Release_3.5.tar.gz" "x265-3.5.tar.gz"
	cd build/linux || exit
	execute cmake -DCMAKE_INSTALL_PREFIX="${WORKSPACE}" -DENABLE_SHARED=OFF -DSTATIC_LINK_CRT=ON -DENABLE_CLI=OFF -DBUILD_SHARED_LIBS=OFF ../../source

	if [ -n "$LDEXEFLAGS" ]; then
		sed -i.backup 's/-lgcc_s/-lgcc_eh/g' x265.pc # The -i.backup is intended and required on MacOS: https://stackoverflow.com/questions/5694228/sed-in-place-flag-that-works-both-on-mac-bsd-and-linux
	fi

	execute ./multilib.sh
	execute make -j $MJOBS
	execute make install

	build_done "x265"
fi
CONFIGURE_OPTIONS+=("--enable-libx265")

if build "libvpx"; then
	download "https://github.com/webmproject/libvpx/archive/v1.9.0.tar.gz" "libvpx-1.9.0.tar.gz"

	if [[ "$OSTYPE" == "darwin"* ]]; then
		echo "Applying Darwin patch"
		sed "s/,--version-script//g" build/make/Makefile > build/make/Makefile.patched
		sed "s/-Wl,--no-undefined -Wl,-soname/-Wl,-undefined,error -Wl,-install_name/g" build/make/Makefile.patched > build/make/Makefile
	fi

	execute ./configure --prefix="${WORKSPACE}" --enable-static --enable-vp9-highbitdepth --disable-shared --disable-unit-tests --disable-examples --as=yasm 
	execute make -j $MJOBS
	execute make install

	build_done "libvpx"
fi
CONFIGURE_OPTIONS+=("--enable-libvpx")

if build "xvidcore"; then
	download "https://downloads.xvid.com/downloads/xvidcore-1.3.7.tar.gz"
	cd build/generic || exit
	CFLAGS="$CFLAGS -fstrength-reduce -ffast-math" execute ./configure --prefix="${WORKSPACE}" --disable-shared --enable-static
	execute make -j $MJOBS
	execute make install

	if [[ -f ${WORKSPACE}/lib/libxvidcore.4.dylib ]]; then
		execute rm "${WORKSPACE}/lib/libxvidcore.4.dylib"
	fi

	if [[ -f ${WORKSPACE}/lib/libxvidcore.so ]]; then
		execute rm "${WORKSPACE}"/lib/libxvidcore.so*
	fi

	build_done "xvidcore"
fi
CONFIGURE_OPTIONS+=("--enable-libxvid")

if build "vid_stab"; then
	download "https://github.com/georgmartius/vid.stab/archive/v1.1.0.tar.gz" "vid.stab-1.1.0.tar.gz"
	execute cmake -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX="${WORKSPACE}" -DUSE_OMP=OFF -DENABLE_SHARED=off .
	execute make
	execute make install

	build_done "vid_stab"
fi
CONFIGURE_OPTIONS+=("--enable-libvidstab")

if build "svt-av1"; then
	download "https://github.com/AOMediaCodec/SVT-AV1/archive/v0.8.6.tar.gz" "svt-av1-38a5fd1.tar.gz"
	cd Build/linux || exit
		sed -i.backup 's/check_executable \-p sudo/check_executable \-p sudo || true/' build.sh

	if [[ "$OSTYPE" == "darwin"* ]]; then
		echo "Applying Darwin patch"
		perl -p0i -e 's/(?<=\n)(\s*?)toolchain=\*\)\n.*?\n\1    ;;\n//sm' build.sh
	fi

	SVT_AV1_CMAKE_EXTRA_FLAGS="-DCMAKE_INSTALL_LIBDIR:PATH=lib"

	# Increase pthread stack size for musl libc
	if command_exists ldd && ldd /bin/ls | grep -q musl; then
		SVT_AV1_CMAKE_EXTRA_FLAGS+=" -DCMAKE_EXE_LINKER_FLAGS=-Wl,-z,stack-size=2097152"
	fi

	CMAKE_EXTRA_FLAGS="$SVT_AV1_CMAKE_EXTRA_FLAGS" execute ./build.sh "prefix=${WORKSPACE}" static release install

	build_done "svt-av1"
fi
CONFIGURE_OPTIONS+=("--enable-libsvtav1")

if build "svt-hevc"; then
	download "https://github.com/OpenVisualCloud/SVT-HEVC/archive/3000da7.tar.gz" "svt-hevc-20201113-3000da7.tar.gz"
	cd Build/linux || exit

	sed -i.backup 's/  check_executable sudo/  \# check_executable sudo/' build.sh

	SVT_HEVC_CMAKE_EXTRA_FLAGS="-DCMAKE_INSTALL_LIBDIR:PATH=lib"

	# Increase pthread stack size for musl libc
	if command_exists ldd && ldd /bin/ls | grep -q musl; then
		SVT_HEVC_CMAKE_EXTRA_FLAGS+=" -DCMAKE_EXE_LINKER_FLAGS=-Wl,-z,stack-size=2097152"
	fi

	CMAKE_EXTRA_FLAGS="$SVT_HEVC_CMAKE_EXTRA_FLAGS" execute ./build.sh "prefix=${WORKSPACE}" static release install

	build_done "svt-hevc"
fi
CONFIGURE_OPTIONS+=("--enable-libsvthevc")

##
## audio library
##

if build "opencore"; then
	download "https://deac-riga.dl.sourceforge.net/project/opencore-amr/opencore-amr/opencore-amr-0.1.5.tar.gz"
	execute ./configure --prefix="${WORKSPACE}" --disable-shared --enable-static
	execute make -j $MJOBS
	execute make install

	build_done "opencore"
fi
CONFIGURE_OPTIONS+=("--enable-libopencore_amrnb" "--enable-libopencore_amrwb")

if build "lame"; then
	download "https://netcologne.dl.sourceforge.net/project/lame/lame/3.100/lame-3.100.tar.gz"
	execute ./configure --prefix="${WORKSPACE}" --disable-shared --enable-static
	execute make -j $MJOBS
	execute make install

	build_done "lame"
fi
CONFIGURE_OPTIONS+=("--enable-libmp3lame")

if build "opus"; then
	download "https://archive.mozilla.org/pub/opus/opus-1.3.1.tar.gz"
	execute ./configure --prefix="${WORKSPACE}" --disable-shared --enable-static
	execute make -j $MJOBS
	execute make install

	build_done "opus"
fi
CONFIGURE_OPTIONS+=("--enable-libopus")

if build "libogg"; then
	download "https://ftp.osuosl.org/pub/xiph/releases/ogg/libogg-1.3.3.tar.gz"
	execute ./configure --prefix="${WORKSPACE}" --disable-shared --enable-static
	execute make -j $MJOBS
	execute make install
	build_done "libogg"
fi

if build "libvorbis"; then
	download "https://ftp.osuosl.org/pub/xiph/releases/vorbis/libvorbis-1.3.6.tar.gz"
	execute ./configure --prefix="${WORKSPACE}" --with-ogg-libraries="${WORKSPACE}"/lib --with-ogg-includes="${WORKSPACE}"/include/ --enable-static --disable-shared --disable-oggtest
	execute make -j $MJOBS
	execute make install

	build_done "libvorbis"
fi
CONFIGURE_OPTIONS+=("--enable-libvorbis")

if build "libtheora"; then
	download "https://ftp.osuosl.org/pub/xiph/releases/theora/libtheora-1.1.1.tar.gz"
	sed "s/-fforce-addr//g" configure > configure.patched
	chmod +x configure.patched
	mv configure.patched configure
	execute ./configure --prefix="${WORKSPACE}" --with-ogg-libraries="${WORKSPACE}"/lib --with-ogg-includes="${WORKSPACE}"/include/ --with-vorbis-libraries="${WORKSPACE}"/lib --with-vorbis-includes="${WORKSPACE}"/include/ --enable-static --disable-shared --disable-oggtest --disable-vorbistest --disable-examples --disable-asm --disable-spec
	execute make -j $MJOBS
	execute make install

	build_done "libtheora"
fi
CONFIGURE_OPTIONS+=("--enable-libtheora")

if build "fdk_aac"; then
	download "https://sourceforge.net/projects/opencore-amr/files/fdk-aac/fdk-aac-2.0.1.tar.gz/download?use_mirror=gigenet" "fdk-aac-2.0.1.tar.gz"
	execute ./configure --prefix="${WORKSPACE}" --disable-shared --enable-static
	execute make -j $MJOBS
	execute make install

	build_done "fdk_aac"
fi
CONFIGURE_OPTIONS+=("--enable-libfdk-aac")


##
## image library
##

if build "libjpeg"; then
	download "https://sourceforge.net/projects/libjpeg-turbo/files/2.0.6/libjpeg-turbo-2.0.6.tar.gz"
	make_dir build
	cd build || exit 1
	execute cmake -DCMAKE_INSTALL_PREFIX="${WORKSPACE}" -DCMAKE_INSTALL_LIBDIR=lib -DCMAKE_INSTALL_BINDIR=bin -DCMAKE_INSTALL_INCLUDEDIR=include -DENABLE_SHARED=OFF -DENABLE_STATIC=ON -DREQUIRE_SIMD=TRUE -DWITH_JPEG8=1 ../
	execute make -j $MJOBS
	execute make install
	build_done "libjpeg"
fi

if build "giflib"; then
	download "https://downloads.sourceforge.net/project/giflib/giflib-5.1.4.tar.bz2"
	# Override autoconf variable to prevent flaky docs from building
	export have_xmlto=no
	execute ./configure --prefix="${WORKSPACE}" --disable-shared --enable-static
	execute make -j $MJOBS
	execute make install

	build_done "giflib"
fi

if build "libpng"; then
	download "https://sourceforge.net/projects/libpng/files/libpng16/1.6.37/libpng-1.6.37.tar.xz"
	execute ./configure --prefix="${WORKSPACE}" --disable-shared --enable-static --with-sysroot="${WORKSPACE}"
	execute make -j $MJOBS CPPFLAGS="$CPPFLAGS"
	execute make install

	build_done "libpng"
fi

if build "libtiff"; then
	download "https://download.osgeo.org/libtiff/tiff-4.1.0.tar.gz"
	execute ./configure --prefix="${WORKSPACE}" --disable-debug --disable-webp --enable-lzma --disable-zstd --disable-shared --enable-static
	execute make -j $MJOBS
	execute make install

	build_done "libtiff"
fi

if build "libwebp"; then
	download "https://storage.googleapis.com/downloads.webmproject.org/releases/webp/libwebp-1.1.0.tar.gz"

	WEBP_OPTIONS=()
	if [[ "$OSTYPE" == "linux"* ]]; then
		WEBP_OPTIONS+=("--disable-gl")
	fi

	execute ./configure --prefix="${WORKSPACE}" --disable-debug \
		"${WEBP_OPTIONS[@]}" \
		--enable-libwebpdecoder \
		--enable-libwebpdemux \
		--enable-libwebpmux \
		--disable-shared \
		--disable-dependency-tracking \
		--disable-sdl \
		--with-pngincludedir="${WORKSPACE}/include" \
		--with-pnglibdir="${WORKSPACE}/lib" \
		--with-jpegincludedir="${WORKSPACE}/include" \
		--with-jpeglibdir="${WORKSPACE}/lib" \
		--with-tiffincludedir="${WORKSPACE}/include" \
		--with-tifflibdir="${WORKSPACE}/lib" \
		--with-gifincludedir="${WORKSPACE}/include" \
		--with-giflibdir="${WORKSPACE}/lib"
			
	execute make -j $MJOBS
	execute make install

	build_done "libwebp"
fi
CONFIGURE_OPTIONS+=("--enable-libwebp")

if build "openjpeg"; then
	download "https://github.com/uclouvain/openjpeg/archive/v2.3.1.tar.gz" "openjpeg-2.3.1.tar.gz"
	make_dir build
	cd build || exit
	execute cmake -DCMAKE_INSTALL_PREFIX="${WORKSPACE}" -DBUILD_SHARED_LIBS=OFF -DBUILD_STATIC_LIBS=ON -DBUILD_CODEC=OFF ..
	execute make -j $MJOBS
	execute make install

	build_done "openjpeg"
fi
CONFIGURE_OPTIONS+=("--enable-libopenjpeg")


##
## other library
##

if build "libsdl"; then
	download "https://www.libsdl.org/release/SDL2-2.0.12.tar.gz"
	execute ./configure --prefix="${WORKSPACE}" --disable-shared --enable-static --disable-joystick
	execute make -j $MJOBS
	execute make install

	build_done "libsdl"
fi

if build "srt"; then
	download "https://github.com/Haivision/srt/archive/v1.4.1.tar.gz" "srt-1.4.1.tar.gz"
	export OPENSSL_ROOT_DIR="${WORKSPACE}"
	export OPENSSL_LIB_DIR="${WORKSPACE}"/lib
	export OPENSSL_INCLUDE_DIR="${WORKSPACE}"/include/
	execute cmake . -DCMAKE_INSTALL_PREFIX="${WORKSPACE}" -DCMAKE_INSTALL_LIBDIR=lib -DCMAKE_INSTALL_BINDIR=bin -DCMAKE_INSTALL_INCLUDEDIR=include -DENABLE_SHARED=OFF -DENABLE_STATIC=ON -DENABLE_APPS=OFF -DUSE_STATIC_LIBSTDCXX=ON
	execute make install

	if [ -n "$LDEXEFLAGS" ]; then
		sed -i.backup 's/-lgcc_s/-lgcc_eh/g' "${WORKSPACE}"/lib/pkgconfig/srt.pc # The -i.backup is intended and required on MacOS: https://stackoverflow.com/questions/5694228/sed-in-place-flag-that-works-both-on-mac-bsd-and-linux
	fi

	build_done "srt"
fi
CONFIGURE_OPTIONS+=("--enable-libsrt")

if build "libxml2"; then
	download "http://xmlsoft.org/sources/libxml2-2.9.10.tar.gz"
	execute ./configure --prefix="${WORKSPACE}" -disable-shared --enable-static --without-python --with-zlib="${WORKSPACE}" --with-lzma="${WORKSPACE}" --with-iconv="${WORKSPACE}"
	execute make -j $MJOBS install

	build_done "libxml2"
fi

##
## HWaccel library
##

if [[ "$OSTYPE" == "linux-gnu" ]]; then
	if command_exists "nvcc" ; then
		if build "nv-codec"; then
			download "https://github.com/FFmpeg/nv-codec-headers/releases/download/n11.0.10.0/nv-codec-headers-11.0.10.0.tar.gz"
			execute make PREFIX="${WORKSPACE}"
			execute make install PREFIX="${WORKSPACE}"
			build_done "nv-codec"
		fi
		CFLAGS+=" -I/usr/local/cuda/include"
		LDFLAGS+=" -L/usr/local/cuda/lib64"
		export CFLAGS
		export LDFLAGS
		CONFIGURE_OPTIONS+=("--enable-ffnvcodec" "--enable-cuda-nvcc" "--enable-cuvid" "--enable-nvdec" "--enable-nvenc" "--enable-cuda-llvm")

		if [ -z "$LDEXEFLAGS" ]; then
			CONFIGURE_OPTIONS+=("--enable-libnpp") # Only libnpp cannot be statically linked.
		fi

		# https://arnon.dk/matching-sm-architectures-arch-and-gencode-for-various-nvidia-cards/
		CONFIGURE_OPTIONS+=("--nvccflags=-gencode arch=compute_52,code=sm_52")

		for fmt in wmv3 hevc h264 vc1 vp9 av1 mpeg4 mjpeg vp8 mpeg2 mpeg1; do
			CONFIGURE_OPTIONS+=("--enable-hwaccel=${fmt}_nvdec")
		done
	fi

	# Vaapi doesn't work well with static links FFmpeg.
	if [ -z "$LDEXEFLAGS" ]; then
		# If the libva development SDK is installed, enable vaapi.
		if library_exists "libva" ; then
			if build "vaapi"; then
				build_done "vaapi"
			fi
			CONFIGURE_OPTIONS+=("--enable-vaapi")
			for fmt in wmv3 hevc h264 vc1 vp9 av1 mpeg4 h263 mjpeg vp8 mpeg2; do
				CONFIGURE_OPTIONS+=("--enable-hwaccel=${fmt}_vaapi")
			done
		fi
	fi
fi


##
## FFmpeg
##

build "ffmpeg"
download "https://github.com/FFmpeg/FFmpeg/archive/$FFMPEG_GIT_REF.tar.gz" "$FFMPEG_BUILD_DIR.tar.gz"

hevc_patch=$(ls $PACKAGES/svt-hevc-*/ffmpeg_plugin/0001-lavc-svt_hevc-add-libsvt-hevc-encoder-wrapper.patch)
if patch -f --dry-run -p1 -i $hevc_patch >/dev/null; then
	echo "Applying SVT-HEVC patch"
	patch -p1 -i $hevc_patch
fi

# Increase pthread stack size for musl libc
if command_exists ldd && ldd /bin/ls | grep -q musl; then
	EXTRA_LDFLAGS+=" -Wl,-z,stack-size=2097152"
fi

# shellcheck disable=SC2086
execute ./configure "${CONFIGURE_OPTIONS[@]}" \
	--enable-hardcoded-tables \
	--disable-autodetect \
	--enable-decoders \
	--enable-encoders \
	--enable-demuxers \
	--enable-muxers \
	--disable-debug \
	--disable-doc \
	--disable-shared \
	--enable-gpl \
	--enable-nonfree \
	--enable-pthreads \
	--enable-static \
	--enable-small \
	--enable-version3 \
	--extra-cflags="${EXTRA_CFLAGS}" \
	--extra-ldexeflags="${LDEXEFLAGS}" \
	--extra-ldflags="${EXTRA_LDFLAGS}" \
	--extra-libs="${EXTRALIBS}" \
	--pkgconfigdir="$WORKSPACE/lib/pkgconfig" \
	--pkg-config-flags="--static" \
	--prefix="${WORKSPACE}"

execute make -j $MJOBS
execute make install

INSTALL_FOLDER="/usr/bin"
if [[ "$OSTYPE" == "darwin"* ]]; then
INSTALL_FOLDER="/usr/local/bin"
fi

echo "::endgroup::"

echo ""
echo "Building done. The following binaries can be found here:"
echo "- ffmpeg: $WORKSPACE/bin/ffmpeg"
echo "- ffprobe: $WORKSPACE/bin/ffprobe"
echo "- ffplay: $WORKSPACE/bin/ffplay"

echo ""

if [[ "$AUTOINSTALL" == "yes" ]]; then
	if command_exists "sudo"; then
		sudo cp "$WORKSPACE/bin/ffmpeg" "$INSTALL_FOLDER/ffmpeg"
		sudo cp "$WORKSPACE/bin/ffprobe" "$INSTALL_FOLDER/ffprobe"
    sudo cp "$WORKSPACE/bin/ffplay" "$INSTALL_FOLDER/ffplay"
		echo "Done. FFmpeg is now installed to your system."
	else
		cp "$WORKSPACE/bin/ffmpeg" "$INSTALL_FOLDER/ffmpeg"
		cp "$WORKSPACE/bin/ffprobe" "$INSTALL_FOLDER/ffprobe"
    sudo cp "$WORKSPACE/bin/ffplay" "$INSTALL_FOLDER/ffplay"
		echo "Done. FFmpeg is now installed to your system."
	fi
elif [[ ! "$SKIPINSTALL" == "yes" ]]; then
	read -r -p "Install these binaries to your $INSTALL_FOLDER folder? Existing binaries will be replaced. [Y/n] " response
	case $response in
	[yY][eE][sS]|[yY])
		if command_exists "sudo"; then
			sudo cp "$WORKSPACE/bin/ffmpeg" "$INSTALL_FOLDER/ffmpeg"
			sudo cp "$WORKSPACE/bin/ffprobe" "$INSTALL_FOLDER/ffprobe"
      sudo cp "$WORKSPACE/bin/ffplay" "$INSTALL_FOLDER/ffplay"
		else
			cp "$WORKSPACE/bin/ffmpeg" "$INSTALL_FOLDER/ffmpeg"
			cp "$WORKSPACE/bin/ffprobe" "$INSTALL_FOLDER/ffprobe"
      cp "$WORKSPACE/bin/ffplay" "$INSTALL_FOLDER/ffplay"
		fi
		echo "Done. FFmpeg is now installed to your system."
		;;
	esac
fi

exit 0
