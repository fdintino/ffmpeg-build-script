name: build test

on:
  push:
    paths-ignore:
      - '*.md'
  pull_request:
    branches: [ master ]

jobs:
  build-linux:
    name: build in native linux
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Cache openssl
        uses: actions/cache@v2
        with:
          path: ./workspace/packages/openssl-1.1.1h
          key: ubuntu-20-openssl-1.1.1h
      - name: Cache cmake
        uses: actions/cache@v2
        with:
          path: ./workspace/packages/cmake-3.18.4
          key: ubuntu-20-cmake-3.18.4

      - name: install libva-dev
        run: |
          sudo apt-get update
          sudo apt-get install -y libva-dev

      - name: build ffmpeg
        run: |
          while sleep 300; do echo "=====[ $SECONDS seconds still running ]====="; done &
          SKIPINSTALL=yes VERBOSE=yes ./build-ffmpeg --build
          kill %1
      - name: check shared library
        run: |
          ldd ./workspace/bin/ffmpeg
      - name: test run ffmepg
        run: |
          ./workspace/bin/ffmpeg -buildconf

  build-macos:
    name: build in native macOS
    runs-on: macos-10.15
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Cache openssl
        uses: actions/cache@v2
        with:
          path: ./workspace/packages/openssl-1.1.1h
          key: macos-10.15-openssl-1.1.1h
      - name: Cache cmake
        uses: actions/cache@v2
        with:
          path: ./workspace/packages/cmake-3.18.4
          key: macos-10.15-cmake-3.18.4

      - name: build ffmpeg
        run: |
          while sleep 300; do echo "=====[ $SECONDS seconds still running ]====="; done &
          SKIPINSTALL=yes VERBOSE=yes ./build-ffmpeg --build
          kill %1
      - name: check shared library
        run: |
          otool -L ./workspace/bin/ffmpeg
      - name: test run ffmepg
        run: |
          ./workspace/bin/ffmpeg -buildconf
      - name: upload binary artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ffmpeg-macos-static-binaries
          path: workspace/bin/ff*

  build-docker:
    name: build in docker
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: pull base image
        id: ubuntu_pull
        run: |
          docker pull ubuntu:20.04
      - name: run if ubuntu_pull failed
        if: failure() && steps.ubuntu_pull.outcome == 'failure'
        run: |
          docker pull ubuntu:20.04
      - name: build ffmpeg
        run: |
          docker build -t ffmpeg:ubuntu -f Dockerfile .
      - name: test run ffmepg
        run: |
          docker run --rm ffmpeg:ubuntu -buildconf

  build-docker-full-static:
    name: build in docker with full-static
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: pull base image
        id: alpine_pull
        run: |
          docker pull alpine:3
      - name: run if alpine_pull failed
        if: failure() && steps.alpine_pull.outcome == 'failure'
        run: |
          docker pull alpine:3
      - name: build ffmpeg
        run: |
          docker build -t ffmpeg:alpine -f alpine.dockerfile .
      - name: test run ffmepg
        run: |
          docker run --rm ffmpeg:alpine -buildconf
      - name: extract binaries
        run: |
          mkdir -p workspace
          docker run --rm --entrypoint="" ffmpeg:alpine tar c -C /usr -f - bin/ffprobe bin/ffmpeg | tar Cxf workspace -
      - name: pull centos:5
        id: centos5_pull
        run: |
          docker pull centos:5
      - name: run if centos5_pull failed
        if: failure() && steps.centos5_pull.outcome == 'failure'
        run: |
          docker pull centos:5
      - name: test run ffmpeg on old kernel
        run: |
          docker run --rm -v$(pwd):/app centos:5 /app/workspace/bin/ffmpeg -buildconf
      - name: upload binary artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ffmpeg-linux-static-binaries
          path: workspace/bin/ff*

  build-cuda-ubuntu-docker:
    name: build in ubuntu docker with cuda
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: pull base image
        id: cuda_ubuntu_pull
        run: |
          docker pull nvidia/cuda:11.1-devel-ubuntu20.04
          docker pull ubuntu:20.04
      - name: run if cuda_ubuntu_pull failed
        if: failure() && steps.cuda_ubuntu_pull.outcome == 'failure'
        run: |
          docker pull nvidia/cuda:11.1-devel-ubuntu20.04
          docker pull ubuntu:20.04
      - name: build ffmpeg
        run: |
          docker build -t ffmpeg:cuda-ubuntu -f cuda-ubuntu.dockerfile .
      - name: test run ffmepg
        run: |
          docker run --rm ffmpeg:cuda-ubuntu -buildconf

  build-cuda-centos-docker:
    name: build in centos docker with cuda
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: pull base image
        id: cuda_centos_pull
        run: |
          docker pull nvidia/cuda:11.1-devel-centos8
          docker pull centos:8
      - name: run if cuda_centos_pull failed
        if: failure() && steps.cuda_centos_pull.outcome == 'failure'
        run: |
          docker pull nvidia/cuda:11.1-devel-centos8
          docker pull centos:8
      - name: build ffmpeg
        run: |
          docker build -t ffmpeg:cuda-centos -f cuda-centos.dockerfile .
      - name: test run ffmepg
        run: |
          docker run --rm ffmpeg:cuda-centos -buildconf

  build-cuda-ubuntu-full-static:
    name: full static cuda build in docker
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: pull base image
        id: cuda_ubuntu_pull
        run: |
          docker pull nvidia/cuda:11.1-devel-ubuntu20.04
      - name: run if cuda_ubuntu_pull failed
        if: failure() && steps.cuda_ubuntu_pull.outcome == 'failure'
        run: |
          docker pull nvidia/cuda:11.1-devel-ubuntu20.04
      - name: build ffmpeg
        run: |
          docker build -t ffmpeg:cuda-static -f full-static.dockerfile .
      - name: test run ffmepg
        run: |
          docker run --rm ffmpeg:cuda-static -buildconf
      - name: extract binaries
        run: |
          mkdir -p workspace
          docker run --rm --entrypoint="" ffmpeg:cuda-static tar Ccf /usr - bin/ff{probe,mpeg} | tar Cxf workspace -
      - name: upload binary artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ffmpeg-linux-cuda-static-binaries
          path: workspace/bin/ff*
      